---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - make
      - gcc
      - conmon
      - jq

  - name: Install go
    command: snap install go --classic

  - name: Create a symbolic link for conmon
    ansible.builtin.file:
      src: /usr/libexec/podman/conmon
      dest: /usr/bin/conmon
      owner: vagrant
      group: vagrant
      state: link

  - name: Adds apt signing key for Kubic
    apt_key:
      url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key
      state: present

  - name: Add Kubic repository
    command: |
      sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce-cli=5:19.03.14~3-0~ubuntu-xenial
      - docker-ce=5:19.03.14~3-0~ubuntu-xenial
      - containers-common
    notify:
      - docker status

  - name: Ensure group docker exists
    ansible.builtin.group:
      name: docker
      state: present

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Create the systemd docker options configuration file
    template: src=docker.service.j2 dest=/usr/lib/systemd/system/docker.service

  - name: Systemd reread configs and restart
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: Restart docker
    service:
      name: docker
      daemon_reload: yes
      state: restarted

  - meta: flush_handlers

  - name: Start Docker service
    service:
      name: docker
      state: started
      enabled: yes

  - name: Remove swapfile from /etc/fstab
    mount:  
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Get kubeadm conf
    get_url:
      url: https://raw.githubusercontent.com/markkuleppala/disco/main/init.yaml
      dest: /home/vagrant/init.yaml
      owner: vagrant
      group: vagrant

  - name: Get CRI-O
    git:
      repo: https://github.com/cri-o/cri-o.git
      dest: $HOME/cri-o
      version: release-1.20
    become: false

  - name: Install CRI-O
    ansible.builtin.shell: |
      make BUILDTAGS=""
      make install
    args:
      chdir: cri-o/

  - name: Get conmon
    git:
      repo: https://github.com/containers/conmon.git
      dest: $HOME/conmon
    become: false

  - name: Install conmon dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - libc6-dev
        - libglib2.0-dev
        - pkg-config
        - runc

  - name: Install conmon
    ansible.builtin.shell: |
      make
      make install
    args:
      chdir: conmon/

  - name: Install CRI-O config
    ansible.builtin.shell: make install.config
    args:
      chdir: cri-o/

  - name: Get registries conf
    get_url:
      url: https://raw.githubusercontent.com/markkuleppala/disco/main/registries.conf
      dest: /etc/containers/registries.conf
      mode: '0755'

  #- name: Install Kata Containers
  #  command: snap install kata-containers --classic --candidate

  - name: Get CRIO-O conf
    get_url:
      url: https://raw.githubusercontent.com/markkuleppala/disco/main/crio.conf
      dest: /etc/crio/crio.conf
      mode: '0755'

  - name: Reload CRIO-O conf
    command: systemctl restart crio
  
  - name: Reload daemon
    command: systemctl daemon-reload

  - name: Restart kubelet
    command: systemctl restart kubelet

  - name: Enable CRI-O service
    command: systemctl enable crio

  - name: Start CRI-O service
    command: systemctl start crio

  - name: Get CNI
    git:
      repo: https://github.com/containernetworking/plugins
      dest: $HOME/plugins
      version: v0.8.7
    become: false

  - name: Install CNI
    ansible.builtin.shell: ./build_linux.sh
    args:
      chdir: plugins/

  - name: Get CNI conf
    get_url:
      url: https://raw.githubusercontent.com/markkuleppala/disco/main/11-crio-ipv4-bridge.conf
      dest: /etc/cni/net.d/11-crio-ipv4-bridge.conf
      owner: vagrant
      group: vagrant

  - name: Create CNI plugin directory
    ansible.builtin.file:
      path: /opt/cni/bin
      owner: vagrant
      group: vagrant

  - name: Copy CNI plugins
    ansible.builtin.shell: |
      cp bin/* /opt/cni/bin/
      chown -R vagrant:vagrant /opt/cni/bin/
    args:
      chdir: plugins/

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --config init.yaml

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: /home/vagrant/.kube
      state: directory
      mode: '0777'

  - name: Setup kubeconfig for vagrant user
    command: cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config

  - name: Change file ownership, group and permissions
    ansible.builtin.file:
      path: /home/vagrant/.kube/config
      owner: vagrant
      group: vagrant
      mode: '0777'

  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/v3.14/getting-started/kubernetes/installation/hosted/calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started
